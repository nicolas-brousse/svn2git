#!/usr/bin/env ruby

# Copyright (c) 2013 Nicolas Brousse
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'optparse'
require 'pp'
require 'benchmark'

module Svn2Git

  # The Commander class
  class Commander

    def initialize(args)
      parsor   = Parser.new args
      @options = parsor.options
    end

    def run!
      banner
      requirements
    end

  private

    def banner
    end

    def requirements
      # TODO: Check git with: `which git`
    end

    def load_repositories
      repositories = []
      repositories
    end
  end

  # The Parser class
  class Parser
    attr_reader :options

    def initialize(args=[])
      # Set up reasonable defaults for options.
      @options = {}
      @options[:verbose]      = false
      @options[:dryrun]       = false
      @options[:authors]      = nil
      @options[:repositories] = nil
      @options[:run_localy]   = false


      # Parse the command-line arguments.
      @opts = OptionParser.new do |opts|
        opts.banner = 'Usage: migrator [options] EXPORT_DIRECTORY'

        opts.separator ''
        opts.separator 'Specific options:'


        opts.on('-r', '--repositories REPOSITORIES_FILE', "Path to file containing repositories to migrate") do |repositories|
          @options[:repositories] = repositories
        end

        opts.on('-A', '--authors AUTHORS_FILE', "Path to file containing svn-to-git authors mapping") do |authors|
          @options[:authors] = File.expand_path(authors.gsub(' ', "\\ "))
        end

        opts.on('-l', '--localy', 'Run command localy') do
          @options[:run_localy] = true
          # Todo: Can add option into yml to precise no git:url but git:file to create a git --bare??
        end


        opts.on('--dry-run', 'Prints out commands without running them') do
          @options[:dryrun] = true
        end

        opts.on('-v', '--verbose', 'Be more verbose. May be given more than once') do
          @options[:verbose] = true
        end

        opts.separator ""

        # No argument, shows at tail.  This will print an options summary.
        # Try it and see!
        opts.on_tail('-h', '--help', 'Show this message') do
          puts opts
          exit
        end
      end

      @opts.parse! args
    end
  end

  class Translater
  end

  class Repository
    attr_reader :name, :options, :svn, :git

    def initialize(name, config={})
      @name        = name
      @options     = config['options']  unless config['options'].nil?
      @svn         = config['svn']      unless config['svn'].nil?
      @git         = config['git']      unless config['git'].nil?
    end
  end

  # The Palette class
  #
  # Contain method to have a beautiful shell
  #
  # Part of this code was copied from Thor, available under MIT-LICENSE
  # Copyright (c) 2008 Yehuda Katz, Eric Hodel, et al.
  #
  # See: https://github.com/erikhuda/thor/blob/master/lib/thor/shell/basic.rb
  # See: https://github.com/erikhuda/thor/blob/master/lib/thor/shell/color.rb
  #
  class Palette
    attr_reader   :padding

    CLEAR      = "\e[0m"
    BOLD       = "\e[1m"

    BLACK      = "\e[30m"
    RED        = "\e[31m"
    GREEN      = "\e[32m"
    YELLOW     = "\e[33m"
    BLUE       = "\e[34m"
    MAGENTA    = "\e[35m"
    CYAN       = "\e[36m"
    WHITE      = "\e[37m"

    ON_BLACK   = "\e[40m"
    ON_RED     = "\e[41m"
    ON_GREEN   = "\e[42m"
    ON_YELLOW  = "\e[43m"
    ON_BLUE    = "\e[44m"
    ON_MAGENTA = "\e[45m"
    ON_CYAN    = "\e[46m"
    ON_WHITE   = "\e[47m"

    def initialize #:nodoc:
      @padding = 0
    end

    def padding=(value)
      @padding = [0, value].max
    end

    def ask(statement, *args)
      options = args.last.is_a?(Hash) ? args.pop : {}
      color = args.first

      if options[:limited_to]
        ask_filtered(statement, color, options)
      else
        ask_simply(statement, color, options)
      end
    end

    def yes?(statement, color=nil)
      !!(ask(statement, color) =~ is?(:yes))
    end

    def no?(statement, color=nil)
      !yes?(statement, color)
    end

    def say(message="", color=nil, force_new_line=(message.to_s !~ /( |\t)\Z/))
      message = message.to_s
      message = set_color(message, *color) if color && can_display_colors?

      buffer = "  " * padding
      buffer << message
      buffer << "\n" if force_new_line && !message.end_with?("\n")

      stdout.print(buffer)
      stdout.flush
    end

    def set_color(string, *colors)
      if colors.all? { |color| color.is_a?(Symbol) || color.is_a?(String) }
        ansi_colors = colors.map { |color| lookup_color(color) }
        "#{ansi_colors.join}#{string}#{CLEAR}"
      else
        # The old API was `set_color(color, bold=boolean)`. We
        # continue to support the old API because you should never
        # break old APIs unnecessarily :P
        foreground, bold = colors
        foreground = self.class.const_get(foreground.to_s.upcase) if foreground.is_a?(Symbol)

        bold       = bold ? BOLD : ""
        "#{bold}#{foreground}#{string}#{CLEAR}"
      end
    end

    # This code was copied from Rake, available under MIT-LICENSE
    # Copyright (c) 2003, 2004 Jim Weirich
    def terminal_width
      if ENV['THOR_COLUMNS']
        result = ENV['THOR_COLUMNS'].to_i
      else
        result = unix? ? dynamic_width : 80
      end
      (result < 10) ? 80 : result
    rescue
      80
    end

    def error(statement)
      stderr.puts statement
    end

    def backspace(num=1)
        say "\n" * num
    end

  protected

    def stdout
      $stdout
    end

    def stdin
      $stdin
    end

    def stderr
      $stderr
    end

    def truncate(string, width)
      as_unicode do
        chars = string.chars.to_a
        if chars.length <= width
          chars.join
        else
          ( chars[0, width-3].join ) + "..."
        end
      end
    end

    if "".respond_to?(:encode)
      def as_unicode
        yield
      end
    else
      def as_unicode
        old, $KCODE = $KCODE, "U"
        yield
      ensure
        $KCODE = old
      end
    end

    def ask_simply(statement, color, options)
      default = options[:default]
      message = [statement, ("(#{default})" if default), nil].uniq.join(" ")
      say(message, color)

      result = if options[:echo] == false
        stdin.noecho(&:gets)
      else
        stdin.gets
      end

      return unless result

      result.strip!

      if default && result == ""
        default
      else
        result
      end
    end

    def ask_filtered(statement, color, options)
      answer_set = options[:limited_to]
      correct_answer = nil
      until correct_answer
        answers = answer_set.join(", ")
        answer = ask_simply("#{statement} [#{answers}]", color, options)
        correct_answer = answer_set.include?(answer) ? answer : nil
        say("Your response must be one of: [#{answers}]. Please try again.") unless correct_answer
      end
      correct_answer
    end
  end
end

# Run migration
migration = Svn2Git::Commander.new(ARGV)
migration.run!
